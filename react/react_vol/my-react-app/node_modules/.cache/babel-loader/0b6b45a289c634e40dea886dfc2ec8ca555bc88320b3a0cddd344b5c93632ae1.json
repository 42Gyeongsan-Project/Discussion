{"ast":null,"code":"import React,{useEffect,useState,useRef}from\"react\";import{useDispatch,useSelector}from'react-redux';import{toggleFriend}from'./redux/actions/friendActions';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function ChatBox(_ref){let{index,name,texts}=_ref;const dispatch=useDispatch();const idx=useSelector(state=>state.friendReducer.idx);const[showWarning,setShowWarning]=useState(true);const handleClose=()=>{dispatch(toggleFriend(-1));};// const [messages, setMessages] = useState([\n//     { id: 1, text: \"안녕하세요!\", sender: \"user\" },\n//     { id: 2, text: \"안녕하세요! 무엇을 도와드릴까요?\", sender: \"bot\" },\n// ]);\nconst[message,setMessage]=useState('');const handleSendMessage=()=>{// if (message.trim() !== '') {\n//     setMessages([\n//         ...messages,\n//         { id: messages.length + 1, text: message, sender: \"user\" },\n//     ]);\n//     setMessage('');\n// }\n};const scrollableRef=useRef(null);const scrollToTop=()=>{if(scrollableRef.current){scrollableRef.current.scrollTop=0;// 스크롤 위치를 0으로 설정\n}};useEffect(()=>{scrollToTop();},[index]);useEffect(()=>{setShowWarning(true);const timer=setTimeout(()=>{setShowWarning(false);// 일정 시간이 지나면 경고 메시지를 숨긴다\n},8000);// 5초 후에 메시지를 숨긴다\nreturn()=>clearTimeout(timer);// 컴포넌트가 언마운트되거나 타이머가 변경되면 타이머를 정리한다\n},[idx]);return/*#__PURE__*/_jsxs(\"div\",{className:\"chat-container\",children:[showWarning&&/*#__PURE__*/_jsx(\"div\",{className:\"chat-warning\",children:\"The Game Is About To Start... Get Ready!\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"chat-header\",children:[name,/*#__PURE__*/_jsx(\"button\",{type:\"button\",class:\"btn-close\",id:\"chat-close\",\"aria-label\":\"Close\",onClick:handleClose})]}),/*#__PURE__*/_jsx(\"hr\",{className:\"chat-header-line\"}),/*#__PURE__*/_jsx(\"div\",{className:\"chat-box\",children:texts.map(msg=>/*#__PURE__*/_jsx(\"div\",{className:\"chat-bubble \".concat(msg.sender),children:msg.text},msg.id))}),/*#__PURE__*/_jsxs(\"div\",{className:\"input-container\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",value:message,onChange:e=>setMessage(e.target.value),placeholder:\"\\uBA54\\uC2DC\\uC9C0\\uB97C \\uC785\\uB825\\uD558\\uC138\\uC694\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSendMessage,children:\"\\uC804\\uC1A1\"})]})]});}","map":{"version":3,"names":["React","useEffect","useState","useRef","useDispatch","useSelector","toggleFriend","jsx","_jsx","jsxs","_jsxs","ChatBox","_ref","index","name","texts","dispatch","idx","state","friendReducer","showWarning","setShowWarning","handleClose","message","setMessage","handleSendMessage","scrollableRef","scrollToTop","current","scrollTop","timer","setTimeout","clearTimeout","className","children","type","class","id","onClick","map","msg","concat","sender","text","value","onChange","e","target","placeholder"],"sources":["/var/my-react-app/src/ChatBox.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { toggleFriend } from './redux/actions/friendActions';\n\nexport default function ChatBox({ index, name, texts }) {\n    const dispatch = useDispatch();\n    const idx = useSelector(state => state.friendReducer.idx);\n    const [showWarning, setShowWarning] = useState(true);\n\n    const handleClose = () => {\n        dispatch(toggleFriend(-1));\n    };\n    // const [messages, setMessages] = useState([\n    //     { id: 1, text: \"안녕하세요!\", sender: \"user\" },\n    //     { id: 2, text: \"안녕하세요! 무엇을 도와드릴까요?\", sender: \"bot\" },\n    // ]);\n    \n    const [message, setMessage] = useState('');\n\n    const handleSendMessage = () => {\n        // if (message.trim() !== '') {\n        //     setMessages([\n        //         ...messages,\n        //         { id: messages.length + 1, text: message, sender: \"user\" },\n        //     ]);\n        //     setMessage('');\n        // }\n    };\n\n    const scrollableRef = useRef(null);\n    const scrollToTop = () => {\n        if (scrollableRef.current) {\n            scrollableRef.current.scrollTop = 0; // 스크롤 위치를 0으로 설정\n          }\n    };\n\n    useEffect(() => {\n        scrollToTop();\n            }, [index]);\n\n    useEffect(() => {\n        setShowWarning(true);\n        const timer = setTimeout(() => {\n            setShowWarning(false); // 일정 시간이 지나면 경고 메시지를 숨긴다\n        }, 8000); // 5초 후에 메시지를 숨긴다\n        return () => clearTimeout(timer); // 컴포넌트가 언마운트되거나 타이머가 변경되면 타이머를 정리한다\n    }, [idx]);\n\n  return (\n        <div className=\"chat-container\">\n            { showWarning &&\n                <div className=\"chat-warning\"> \n                    The Game Is About To Start... Get Ready!\n                </div>\n            }\n            <div className=\"chat-header\">\n                {name}\n                <button type=\"button\" \n                    class=\"btn-close\" \n                    id=\"chat-close\" \n                    aria-label=\"Close\"\n                    onClick={handleClose}\n                    >\n                </button>\n            </div>\n            <hr className=\"chat-header-line\"/>\n            <div className=\"chat-box\">\n                {texts.map((msg) => (\n                    <div key={msg.id} className={`chat-bubble ${msg.sender}`}>\n                        {msg.text}\n                    </div>\n                ))}\n            </div>\n            <div className=\"input-container\">\n                <input \n                    type=\"text\" \n                    value={message} \n                    onChange={(e) => setMessage(e.target.value)} \n                    placeholder=\"메시지를 입력하세요\" \n                />\n                <button onClick={handleSendMessage}>전송</button>\n            </div>\n        </div>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}